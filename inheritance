SINGLEEE
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Vehicle Inheritance - TypeScript</title>
  <script src="app.js" defer></script>
  <style>
    body { font-family: Arial; padding: 20px; }
    button { margin: 5px; padding: 8px 12px; }
  </style>
</head>
<body>

  <h2>Vehicle Inheritance Example</h2>

  <button onclick="showCar()">Show Car Description</button>
  <button onclick="showBicycle()">Show Bicycle Description</button>

  <div id="output"></div>

</body>
</html>

class Vehicle {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  describe(): string {
    return `${this.name} is a vehicle.`;
  }
}

class Car extends Vehicle {
  constructor(name: string) {
    super(name);
  }

  describe(): string {
    return `${this.name} is a car with 4 wheels.`;
  }
}

class Bicycle extends Vehicle {
  constructor(name: string) {
    super(name);
  }

  describe(): string {
    return `${this.name} is a bicycle with 2 wheels.`;
  }
}

// Functions to display output on the page
function showCar(): void {
  const car = new Car("Honda");
  document.getElementById("output")!.innerText = car.describe();
}

function showBicycle(): void {
  const bicycle = new Bicycle("Hero");
  document.getElementById("output")!.innerText = bicycle.describe();
}

MULTILEVELLLL
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Multi-Level Inheritance Example</title>
  <script src="app.js" defer></script>
  <style>
    body { font-family: Arial; padding: 20px; }
    button { padding: 8px 12px; margin: 5px; }
  </style>
</head>
<body>

  <h2>Multi-Level Inheritance - TypeScript</h2>

  <button onclick="showVehicle()">Show Vehicle</button>
  <button onclick="showCar()">Show Car</button>
  <button onclick="showElectricCar()">Show Electric Car</button>

  <p id="output"></p>

</body>
</html>

// Base class
class Vehicle {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  describe(): string {
    return `${this.name} is a general vehicle.`;
  }
}

// First-level derived class
class Car extends Vehicle {
  constructor(name: string) {
    super(name);
  }

  describe(): string {
    return `${this.name} is a car with an engine and 4 wheels.`;
  }
}

// Second-level derived class
class ElectricCar extends Car {
  constructor(name: string) {
    super(name);
  }

  describe(): string {
    return `${this.name} is an electric car with battery-powered engine.`;
  }
}

// Functions to update HTML output
function showVehicle(): void {
  const vehicle = new Vehicle("Transporter");
  document.getElementById("output")!.innerText = vehicle.describe();
}

function showCar(): void {
  const car = new Car("Honda");
  document.getElementById("output")!.innerText = car.describe();
}

function showElectricCar(): void {
  const eCar = new ElectricCar("Tesla");
  document.getElementById("output")!.innerText = eCar.describe();
}

INTERFACEEEE
// Define the interface
interface Shape {
  area(): number;
  perimeter(): number;
}

// Implement the interface in Circle class
class Circle implements Shape {
  radius: number;

  constructor(radius: number) {
    this.radius = radius;
  }

  area(): number {
    return Math.PI * this.radius * this.radius;
  }

  perimeter(): number {
    return 2 * Math.PI * this.radius;
  }
}

// Example usage
const myCircle = new Circle(5);
console.log("Area of circle:", myCircle.area().toFixed(2));
console.log("Perimeter of circle:", myCircle.perimeter().toFixed(2));
